#include "pebble.h"

#include "jsmn.h"
#include "openweather.h"

#define log_die(s) {APP_LOG(APP_LOG_LEVEL_ERROR,s); return 1;}
char* keys_array[] = {
  "city",
  "id",
  "name",
  "coord"
};

// based on http://alisdair.mcdiarmid.org/2012/08/14/jsmn-example.html

bool json_token_streq(char *js, jsmntok_t *t, char *s)
{
    return (strncmp(js + t->start, s, t->end - t->start) == 0
            && strlen(s) == (size_t) (t->end - t->start));
}

char * json_token_tostr(char *js, jsmntok_t *t)
{
    js[t->end] = '\0';
    return js + t->start;
}

typedef enum {
    START,
    WRAPPER, OBJECT,
    FORCASTS, ARRAY,
    TREND, NAME,
    SKIP,
    STOP
} parse_state;

int fill_forecast_struct(char* js, jsmntok_t * tokens, unsigned int num_tokens)
{
    int error = 0;

    // state is the current state of the parser
    parse_state state = WRAPPER;

    // stack is the state we return to when reaching the end of an object
    parse_state stack = STOP;

    // Counters to keep track of how far through parsing we are
    size_t object_tokens = 0;
    size_t skip_tokens = 0;
    size_t forecasts = 0;
    size_t trend_tokens = 0;

    for (size_t i = 0, j = 1; j > 0; i++, j--)
    {
        jsmntok_t *t = &tokens[i];

        // Should never reach uninitialized tokens
        //log_assert(t->start != -1 && t->end != -1);

        if (t->type == JSMN_ARRAY || t->type == JSMN_OBJECT)
            j += t->size;

        APP_LOG(APP_LOG_LEVEL_DEBUG, "Loop %d %d %d %d", state, stack, i, j);
        switch (state)
        {
            case START:
                if (t->type != JSMN_ARRAY)
                    log_die("Invalid response: root element must be array.");
                if (t->size != 1)
                    log_die("Invalid response: array must have one element.");

                state = WRAPPER;
                break;

            case WRAPPER:
                if (t->type != JSMN_OBJECT)
                    log_die("Invalid response: wrapper must be an object.");

                state = OBJECT;
                object_tokens = t->size;
                break;

            case OBJECT:
                object_tokens--;

                // Keys are odd-numbered tokens within the object
                if (object_tokens % 2 == 1)
                {
                    if (t->type == JSMN_STRING && json_token_streq(js, t, "list")) {
                        APP_LOG(APP_LOG_LEVEL_DEBUG, "Found list");
                        state = FORCASTS;
                    }
                }
                else if (t->type == JSMN_ARRAY || t->type == JSMN_OBJECT)
                {
                    state = SKIP;
                    stack = OBJECT;
                    skip_tokens = t->size;
                }

                // Last object value
                if (object_tokens == 0)
                    state = STOP;

                break;

            case SKIP:
                skip_tokens--;

                if (t->type == JSMN_ARRAY || t->type == JSMN_OBJECT)
                    skip_tokens += t->size;

                if (skip_tokens == 0)
                    state = stack;

                break;

            case FORCASTS:
                if (t->type != JSMN_ARRAY)
                    log_die("Unknown forecasts value: expected array.");

                forecasts = t->size;
                state = ARRAY;
                stack = ARRAY;

                // No forecasts found
                if (forecasts == 0)
                    state = STOP;

                break;

            case ARRAY:
                forecasts--;

                trend_tokens = t->size;
                state = TREND;

                // Empty trend object
                if (trend_tokens == 0)
                    state = STOP;

                // Last trend object
                if (forecasts == 0)
                    stack = STOP;

                break;

            case TREND:
            case NAME:
                trend_tokens--;

                // Keys are odd-numbered tokens within the object
                if (trend_tokens % 2 == 1)
                {
                    if (t->type == JSMN_STRING && json_token_streq(js, t, "name"))
                        state = NAME;
                }
                // Only care about values in the NAME state
                else if (state == NAME)
                {
                    if (t->type != JSMN_STRING)
                        log_die("Invalid trend name.");

                    char *str = json_token_tostr(js, t);
                    APP_LOG(APP_LOG_LEVEL_DEBUG, "Found %s", str);

                    state = TREND;
                }
                else if (t->type == JSMN_ARRAY || t->type == JSMN_OBJECT)
                {
                    state = SKIP;
                    stack = TREND;
                    skip_tokens = t->size;
                }

                // Last object value
                if (trend_tokens == 0)
                    state = stack;

                break;

            case STOP:
                // Just consume the tokens
                break;

            default:
                log_die("Invalid state");
        }
    }
  return error;
}
